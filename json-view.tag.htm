<htm>
	<aside>
		<a on-tap='copy'>copy</a>
		<a on-tap='save'>save</a>
	</aside>
	<main></main>
</htm>

<script>
	// import typeOf from '../type.js';

	class {
		$onReady() {
			this.show()
		}
		$onDataChange() {
			this.show()
		}
		show() {
			try {
				this.$view.Q('main', 1).innerHTML = this.html(JSON.parse(this.textContent));
			} catch { }
		}

		copy() {
			import('https://max.pub/lib/data.js').then(x => x.copy(this.textContent))
		}
		save() {
			import('https://max.pub/lib/data.js').then(x => x.save(this.textContent, 'data.json', 'application/json'))
		}
		html(data, level = 0) {
			let typ = typeof (data);
			if (Array.isArray(data))
				typ = 'array';
			if (data === null)
				typ = 'null';
			let date = new Date(data);
			if (date.getFullYear() > 1970 && date.getFullYear() < 2030 && typ == 'string' && data.length > 5)
				typ = 'date';
			// console.log(data);
			let url = /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[\-;:&=\+\$,\w]+@)?[A-Za-z0-9\.\-]+|(?:www\.|[\-;:&=\+\$,\w]+@)[A-Za-z0-9\.\-]+)((?:\/[\+~%\/\.\w\-_]*)?\??(?:[\-\+=&;%@\.\w_]*)#?(?:[\.\!\/\\\w]*))?)/.exec(data)?.[0]
			// let url = /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[\-;:&=\+\$,\w]+@)?[A-Za-z0-9\.\-]+|(?:www\.|[\-;:&=\+\$,\w]+@)[A-Za-z0-9\.\-]+)((?:\/[\+~%\/\.\w\-_]*)?\??(?:[\-\+=&;%@\.\w_]*)#?(?:[\.\!\/\\\w]*))?)/)[0];
			// console.log('url', url);
			if (url && url == data)
				typ = 'url';
			let output = '';
			let tabs = Array(level + 1).fill('').join('\t');
			let len = JSON.stringify(data).length;
			switch (typ) {
				case 'object':
					// console.log("OBJECT", data)
					// for (let key in data) console.log('key', key)
					for (let key in data)
						output += `<item level='${level}'><key>${key}</key>${this.html(data[key], level + 1)}</item>`;
					// console.log('output',output)
					return `<dict class='${len < 50 ? 'short' : 'long'}'>${output}</dict>`;

				case 'array':
					// let newline = len < 50 ? '' : '\n';
					// tabs = len < 50 ? '' : tabs;
					for (let index in data)
						output += `<item level='${level}'>${this.html(data[index], level + 1)}</item>`;
					return `<list class='${len < 50 ? 'short' : 'long'}'>${output}</list>`;

				case 'string':
				case 'url':
				case 'date':
					return `<value class='string ${typ}'>${data}</value>`;

				case 'boolean':
					return `<value class='${typ} ${data}'>${data}</value>`;
				case 'number':
				default:
					return `<value class='${typ}'>${data}</value>`;
				// case 'number': return `<control>"</control><value class='date'>${date}</value><control>"</control>`;
			}

			// return output;
		}
	}
</script>

<style>
	:host {
		display: inline-block;
		background: #333;
		tab-size: 4;
		-moz-tab-size: 4;
		font-size: 14px;
		text-align: left;
		color: white;
		font-family: "Lucida Console", Monaco, monospace;
		/* padding: .3rem; */
	}

	main {
		white-space: pre;
	}

	/* :host(:not(.save,.copy)) aside{
		display: none
	} */

	:host(:not(.copy)) aside [on-tap='copy'] {
		display: none
	}

	:host(:not(.save)) aside [on-tap='save'] {
		display: none
	}

	aside {
		display: flex;
		justify-content: space-between;
	}

	aside a {
		color: silver;
		padding-bottom: .5rem;
	}

	a:hover {
		cursor: pointer;
		color: cornflowerblue
	}

	/* iframe {
		width: 100%;
		height: 100%;
		border: none;
	} */


	/* body {
		tab-size: 4;
		-moz-tab-size: 4;
		font-size: 14px;
		white-space: pre;
		color: white;
		font-family: monospace;
	} */


	.long>item {
		display: block;
	}

	/* [level='0'] {
		margin-left: 2rem;
	}

	[level='1'] {
		margin-left: 4rem;
	} */

	*::before,
	*::after {
		color: silver;
	}

	.short>item {
		margin: 0;
	}

	dict::before {
		content: '{';
	}

	dict::after {
		content: '}';
	}

	list::before {
		content: '[';
	}

	list::after {
		content: ']';
	}

	item {
		margin-left: 2rem;
	}

	item::after {
		content: ', ';
	}

	item:last-child::after {
		content: '';
	}

	key {
		color: white;
		font-weight: bold;
	}

	key::before {
		content: '"';
	}

	key::after {
		content: '": ';
	}

	.string::before {
		content: '"';
	}

	.string::after {
		content: '"';
	}


	.string {
		color: gold;
	}

	.date {
		color: magenta;
	}

	.url {
		color: pink;
	}

	.null,
	.undefined {
		color: silver;
	}

	.boolean.false {
		color: #f44;
	}

	.boolean.true {
		color: #4f4;
	}

	.number {
		color: aqua;
	}
</style>