<htm>
	<aside>
		<a on-tap='copy'>copy</a>
		<a on-tap='save'>save</a>
	</aside>
	<main></main>
</htm>

<script>
	// import typeOf from '../type.js';

	class {
		$onReady() {
			this.show()
		}
		$onDataChange() {
			this.show()
		}
		show() {
			try {
				this.$view.Q('main', 1).innerHTML = this.html(JSON.parse(this.textContent));
			} catch { }
		}

		copy() {
			import('https://max.pub/lib/data.js').then(x => x.copy(this.textContent))
		}
		save() {
			import('https://max.pub/lib/data.js').then(x => x.save(this.textContent, 'data.json', 'application/json'))
		}
		html(data, level = 0) {
			let typ = typeof (data);
			if (Array.isArray(data)) typ = 'array';
			if (data === null) typ = 'null';
			let output = '';
			let len = JSON.stringify(data).length;
			switch (typ) {
				case 'object':
				case 'array':
					for (let key in data)
						output += `<item level='${level}'><key>${key}</key>${this.html(data[key], level + 1)}</item>`;
					return `<list class='${typ} ${len < 50 ? 'short' : 'long'}'>${output}</list>`;

				default:
					return `<value class='${typ} ${data}'>${data}</value>`;

			}

		}
	}
</script>

<style>
	:host {
		display: inline-block;
		background: #333;

		font-size: 14px;
		text-align: left;
		color: white;
		font-family: "Lucida Console", Monaco, monospace;
		/* padding: .3rem; */
	}


	:host(:not(.copy)) aside [on-tap='copy'] {
		color: transparent;
		/* display: none */
	}

	:host(:not(.save)) aside [on-tap='save'] {
		color: transparent;
		/* display: none */
	}

	aside {
		display: flex;
		justify-content: space-between;
	}

	aside a {
		color: silver;
		padding-bottom: .5rem;
	}

	a:hover {
		cursor: pointer;
		color: cornflowerblue
	}


	:host(:not(.compact)) .short>item {
		display: block;
	}

	:host(.compact) .short>item {
		margin: 0 .5em;
		/* margin-left: 1em; */
	}

	.long>item {
		display: block;
	}


	*::before,
	*::after {
		color: silver;
	}



	.object::before {
		content: '{';
	}

	.object::after {
		content: '}';
	}

	.array::before {
		content: '[';
	}

	.array>item>key {
		display: none;
	}

	.array::after {
		content: ']';
	}

	item {
		margin-left: 2rem;
	}

	:host(.meta) item::after {
		content: ', ';
	}

	:host(.meta) item:last-child::after {
		content: '';
	}

	key {
		color: white;
		/* font-weight: bold; */
	}

	:host(.meta) key::before {
		content: '"';
	}

	:host(.meta) key::after {
		content: '": ';
	}
	key::after {
		content: ": "
	}

	:host(.meta) .string::before {
		content: '"';
	}

	:host(.meta) .string::after {
		content: '"';
	}


	.string {
		color: #ff7;
		/* color: hsla(60,80%,80%,90%) */
	}

	.null,
	.undefined {
		color: silver;
	}

	.boolean.false {
		color: #f77;
	}

	.boolean.true {
		color: #7f7;
	}

	.number {
		color: #7ff;
	}
</style>