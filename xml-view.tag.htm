<htm>
	<aside class='h-stack'>
		<div class='h-stack'>
			<a on-tap='copyAll'>copy</a>
			<a on-tap='saveAll'>save</a>
		</div>
		<div class='h-stack'>
			<a on-tap='pure'>pure</a>
			<a on-tap='long'>long</a>
		</div>
	</aside>
	<main></main>
</htm>

<script>
	// import typeOf from '../type.js';




	class {


		$onReady() {
			this.showDOM()
		}
		$onDataChange() {
			this.showDOM()
		}
		// $onFrameChange() {
		// 	console.log("FRAME", this.classList.contains('types'))
		// 	if (this.classList.contains('types'))
		// 		import('https://max.pub/lib/types.js').then(x => { console.log(x.default); this.type = x.default })
		// }

		type() { return '' } // default, overwritten by external type-checker

		showDOM() {
			if (!this.innerHTML.trim()) return;
			this.value = this.innerHTML;
		}
		set value(v) {
			if (typeof v == 'string') v = new DOMParser().parseFromString(`<x>${v}</x>`, 'text/xml').firstChild;
			this.XML = v;
			this.render();
			// html(v).then(x => this.$view.Q('main', 1).innerHTML = x);
		}
		get text() {
			return new XMLSerializer().serializeToString(this.XML)
		}
		async render() {
			if (this.classList.contains('types'))
				this.type = (await import('https://max.pub/lib/types.js')).default;//.then(x => {console.log(x.default);this.type = x.default})
			console.log('type checker', this.type);
			console.log('render now')
			// this.$view.Q('main', 1).innerHTML = this.html(this.XML);

			// this.$view.Q('main', 1).innerHTML = new XMLSerializer().serializeToString(this.html(this.XML))

			this.$view.Q('main', 1).innerHTML = ''
			this.$view.Q('main', 1).ADD(this.html(this.XML))
		}

		// show() {

		// 	try {
		// 		this.$view.Q('main', 1).innerHTML = html(new DOMParser().parseFromString(this.innerHTML, 'text/xml').firstChild);
		// 	} catch { }
		// }
		pure() { this.classList.toggle('pure') }
		long() { this.classList.toggle('long') }
		copy(text) {
			import('https://max.pub/lib/data.js').then(x => x.copy(text))
		}
		save(text) {
			import('https://max.pub/lib/data.js').then(x => x.save(text, 'data.xml', 'text/xml'))
		}
		copyAll() {
			this.copy(this.text);
		}
		saveAll() {
			this.save(this.text);
		}
		copyPart(node) {
			// console.log('part', node.tagName, node.textContent)
			switch (node.tagName) {
				case 'VALUE': return this.copy(node.textContent);
				case 'KEY': return this.copy(node.parentNode.textContent);
				case 'TAG': return this.copy(node.textContent);
			}
		}

		html(node, level = 0) {
			if (node.nodeType == 3) {
				if (node.nodeValue.trim()) return NODE('text').ADD(node.nodeValue);
				else return '';
			}

			let children = Array.from(node.childNodes);
			let attributes = Array.from(node.attributes);

			let output = NODE('tag', { 'on-tap': 'copyPart' }).ADD(NODE('c').ADD('<'), NODE('name').ADD(node.tagName))
			if (attributes.length)
				output.ADD(NODE('attributes').ADD(
					...attributes.map(attr =>
						NODE('attribute', { class: this.type(attr.value) }).ADD(
							NODE('key', { 'on-tap': 'copyPart' }).ADD(' ' + attr.name),
							NODE('c').ADD('="'),
							NODE('value', { 'on-tap': 'copyPart' }).ADD(attr.value),
							NODE('c').ADD('"'),
						)),

				))
			if (children.length)
				output.ADD(NODE('c').ADD('>'), NODE('children').ADD(
					...children.map(child => this.html(child))
				),
					NODE('c').ADD('</'), NODE('name',{class:'close'}).ADD(node.tagName), NODE('c').ADD('>')
				)
			else
				output.ADD(NODE('c').ADD('/>'))

			return output;
		}

	}
</script>

<style>
	:host {
		display: inline-block;
		background: #333;
		/* tab-size: 4; */
		/* -moz-tab-size: 4; */
		font-size: 14px;
		text-align: left;
		color: white;
		font-family: "Lucida Console", Monaco, monospace;
		/* padding: .3rem; */
		scrollbar-color: #444 #333;
		scrollbar-width: thin;
	}

	:host(.scroll) {
		overflow: auto;
		width: 100%;
		height: 100%;
	}

	:host(:not(.copy)) aside [on-tap='copyAll'] {
		color: transparent;
		/* display: none */
	}

	:host(:not(.save)) aside [on-tap='saveAll'] {
		color: transparent;
		/* display: none */
	}


	:host::-webkit-scrollbar {
		width: .5rem;
	}

	:host::-webkit-scrollbar-track {
		box-shadow: inset 0 0 6px #333;
	}

	:host::-webkit-scrollbar-thumb {
		background-color: #444;
	}

	.h-stack {
		display: flex;
		justify-content: space-between;
	}

	aside div {
		width: 20%;
	}

	aside a {
		color: gray;
		padding-bottom: .5rem;
	}

	a:hover {
		cursor: pointer;
		color: cornflowerblue
	}

	c {
		color: gray;
		/* display: none; */
	}

	:host(.pure) c {
		display: none;
	}
	:host(.pure) .close {
		display: none;
	}
	/* tag {
		display: block;
		margin-left: 2rem;

	}

	tag::before {
		content: '<';
		color: gray;
	}

	tag::after {
		content: '>';
		color: gray;
	}

	attribute>value::before {
		content: '="';
		color: gray;
	}

	attribute>value::after {
		content: '"';
		color: gray;
	} */


	tag {
		display: block;
		margin-left: 2rem;
	}

	tag:hover>name {
		cursor: pointer;
		color: red;
	}

	attribute {
		/* display: block; */
		margin-left: 1rem;
	}

	:host(.long) attribute {
		display: block;
	}

	:host(.long) text {
		margin-left: 1rem;
		display: block;
	}

	attribute>key {
		color: silver
	}

	:host(.pure) attribute>key {
		margin-right: .5rem;
	}

	attribute:hover {
		background: #444;
		cursor: pointer;
	}


	attribute>value {
		/* default value color */
		color: #ff7;
	}


	text {
		color: lightblue;
	}

	.boolean.false {
		color: #f77;
	}

	.boolean.true {
		color: #7f7;
	}

	.int>value,
	.real>value {
		color: #7ff;
	}

	.time>value,
	.date>value,
	.datetime>value {
		color: #f7f;
	}
</style>